{"version":3,"file":"atrament.min.js","mappings":"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","sources":["webpack://Atrament/webpack/universalModuleDefinition","webpack://Atrament/webpack/bootstrap","webpack://Atrament/webpack/runtime/define property getters","webpack://Atrament/webpack/runtime/hasOwnProperty shorthand","webpack://Atrament/webpack/runtime/make namespace object","webpack://Atrament/./src/mouse.js","webpack://Atrament/./src/pixels.js","webpack://Atrament/./src/atrament.js","webpack://Atrament/./index.js","webpack://Atrament/./src/constants.js","webpack://Atrament/./src/events.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Atrament\"] = factory();\n\telse\n\t\troot[\"Atrament\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable max-classes-per-file */\n// make a class for Point\nexport class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\n// make a class for the mouse data\nexport class Mouse extends Point {\n  constructor() {\n    super(0, 0);\n    this.down = false;\n    this.previous = new Point(0, 0);\n  }\n}\n","export const lineDistance = (x1, y1, x2, y2) => {\n  // calculate euclidean distance between (x1, y1) and (x2, y2)\n  const xs = (x2 - x1) ** 2;\n  const ys = (y2 - y1) ** 2;\n  return Math.sqrt(xs + ys);\n};\n\nexport const hexToRgb = (hexColor) => {\n  // Since input type color provides hex and ImageData accepts RGB need to transform\n  const m = hexColor.match(/^#?([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/i);\n  return [\n    parseInt(m[1], 16),\n    parseInt(m[2], 16),\n    parseInt(m[3], 16),\n  ];\n};\n\nexport const matchColor = (data, compR, compG, compB, compA) => (pixelPos) => {\n  // Pixel color equals comp color?\n  const r = data[pixelPos];\n  const g = data[pixelPos + 1];\n  const b = data[pixelPos + 2];\n  const a = data[pixelPos + 3];\n\n  return (r === compR && g === compG && b === compB && a === compA);\n};\n\n/* eslint-disable no-param-reassign */\nexport const colorPixel = (data, fillR, fillG, fillB, startColor, alpha) => {\n  const matcher = exports.matchColor(data, ...startColor);\n\n  return (pixelPos) => {\n    // Update fill color in matrix\n    data[pixelPos] = fillR;\n    data[pixelPos + 1] = fillG;\n    data[pixelPos + 2] = fillB;\n    data[pixelPos + 3] = alpha;\n\n    if (!matcher(pixelPos + 4)) {\n      data[pixelPos + 4] = data[pixelPos + 4] * 0.01 + fillR * 0.99;\n      data[pixelPos + 4 + 1] = data[pixelPos + 4 + 1] * 0.01 + fillG * 0.99;\n      data[pixelPos + 4 + 2] = data[pixelPos + 4 + 2] * 0.01 + fillB * 0.99;\n      data[pixelPos + 4 + 3] = data[pixelPos + 4 + 3] * 0.01 + alpha * 0.99;\n    }\n\n    if (!matcher(pixelPos - 4)) {\n      data[pixelPos - 4] = data[pixelPos - 4] * 0.01 + fillR * 0.99;\n      data[pixelPos - 4 + 1] = data[pixelPos - 4 + 1] * 0.01 + fillG * 0.99;\n      data[pixelPos - 4 + 2] = data[pixelPos - 4 + 2] * 0.01 + fillB * 0.99;\n      data[pixelPos - 4 + 3] = data[pixelPos - 4 + 3] * 0.01 + alpha * 0.99;\n    }\n  };\n};\n/* eslint-enable no-param-reassign */\n","import { Mouse, Point } from './mouse.js';\nimport * as Constants from './constants.js';\nimport AtramentEventTarget from './events.js';\nimport * as Pixels from './pixels.js';\n\nconst DrawingMode = {\n  DRAW: 'draw',\n  ERASE: 'erase',\n  FILL: 'fill',\n  DISABLED: 'disabled',\n};\n\nconst PathDrawingModes = [DrawingMode.DRAW, DrawingMode.ERASE];\n\nexport default class Atrament extends AtramentEventTarget {\n  constructor(selector, config = {}) {\n    if (typeof window === 'undefined') {\n      throw new Error('Looks like we\\'re not running in a browser');\n    }\n\n    super();\n\n    // get canvas element\n    if (selector instanceof window.Node && selector.tagName === 'CANVAS') this.canvas = selector;\n    else if (typeof selector === 'string') this.canvas = document.querySelector(selector);\n    else throw new Error(`can't look for canvas based on '${selector}'`);\n    if (!this.canvas) throw new Error('canvas not found');\n\n    // set external canvas params\n    this.canvas.width = config.width || this.canvas.width;\n    this.canvas.height = config.height || this.canvas.height;\n\n    // create a mouse object\n    this.mouse = new Mouse();\n\n    // mousemove handler\n    const mouseMove = (event) => {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      const rect = this.canvas.getBoundingClientRect();\n      const position = (event.changedTouches && event.changedTouches[0]) || event;\n      let x = position.offsetX;\n      let y = position.offsetY;\n\n      if (typeof x === 'undefined') {\n        x = position.clientX - rect.left;\n      }\n      if (typeof y === 'undefined') {\n        y = position.clientY - rect.top;\n      }\n\n      const { mouse } = this;\n      // draw if we should draw\n      if (mouse.down && PathDrawingModes.includes(this.mode)) {\n        const { x: newX, y: newY } = this.draw(x, y, mouse.previous.x, mouse.previous.y);\n\n        if (!this.dirty && this.mode === DrawingMode.DRAW && (x !== mouse.x || y !== mouse.y)) {\n          this.dirty = true;\n          this.fireDirty();\n        }\n\n        mouse.set(x, y);\n        mouse.previous.set(newX, newY);\n      } else {\n        mouse.set(x, y);\n      }\n    };\n\n    // mousedown handler\n    const mouseDown = (event) => {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n      // update position just in case\n      mouseMove(event);\n\n      // if we are filling - fill and return\n      if (this.mode === DrawingMode.FILL) {\n        this.fill();\n        return;\n      }\n      // remember it\n      const { mouse } = this;\n      mouse.previous.set(mouse.x, mouse.y);\n      mouse.down = true;\n\n      this.beginStroke(mouse.previous.x, mouse.previous.y);\n    };\n\n    const mouseUp = (e) => {\n      if (this.mode === DrawingMode.FILL) {\n        return;\n      }\n\n      const { mouse } = this;\n\n      if (!mouse.down) {\n        return;\n      }\n\n      const position = (e.changedTouches && e.changedTouches[0]) || e;\n      const x = position.offsetX;\n      const y = position.offsetY;\n      mouse.down = false;\n\n      if (mouse.x === x && mouse.y === y && PathDrawingModes.includes(this.mode)) {\n        const { x: nx, y: ny } = this.draw(mouse.x, mouse.y, mouse.previous.x, mouse.previous.y);\n        mouse.previous.set(nx, ny);\n      }\n\n      this.endStroke(mouse.x, mouse.y);\n    };\n\n    // attach listeners\n    this.canvas.addEventListener('mousemove', mouseMove);\n    this.canvas.addEventListener('mousedown', mouseDown);\n    document.addEventListener('mouseup', mouseUp);\n    this.canvas.addEventListener('touchstart', mouseDown);\n    this.canvas.addEventListener('touchend', mouseUp);\n    this.canvas.addEventListener('touchmove', mouseMove);\n\n    // helper for destroying Atrament (removing event listeners)\n    this.destroy = () => {\n      this.clear();\n      this.canvas.removeEventListener('mousemove', mouseMove);\n      this.canvas.removeEventListener('mousedown', mouseDown);\n      document.removeEventListener('mouseup', mouseUp);\n      this.canvas.removeEventListener('touchstart', mouseDown);\n      this.canvas.removeEventListener('touchend', mouseUp);\n      this.canvas.removeEventListener('touchmove', mouseMove);\n    };\n\n    // set internal canvas params\n    this.context = this.canvas.getContext('2d');\n    this.context.globalCompositeOperation = 'source-over';\n    this.context.globalAlpha = 1;\n    this.context.strokeStyle = config.color || 'rgba(0,0,0,1)';\n    this.context.lineCap = 'round';\n    this.context.lineJoin = 'round';\n    this.context.translate(0.5, 0.5);\n\n    this.filling = false;\n    this.fillStack = [];\n\n    // set drawing params\n    this.recordStrokes = false;\n    this.strokeMemory = [];\n\n    this.smoothing = Constants.initialSmoothingFactor;\n    this.thickness = Constants.initialThickness;\n    this.targetThickness = this.thickness;\n    this.weightInternal = this.thickness;\n    this.maxWeight = this.thickness + Constants.weightSpread;\n\n    this.modeInternal = DrawingMode.DRAW;\n    this.adaptiveStroke = true;\n\n    // update from config object\n    ['weight', 'smoothing', 'adaptiveStroke', 'mode']\n      .forEach((key) => {\n        if (config[key] === undefined) {\n          this[key] = config[key];\n        }\n      });\n  }\n\n  /**\n   * Begins a stroke at a given position\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  beginStroke(x, y) {\n    this.context.beginPath();\n    this.context.moveTo(x, y);\n\n    if (this.recordStrokes) {\n      this.strokeTimestamp = performance.now();\n      this.strokeMemory.push({\n        point: new Point(x, y),\n        time: performance.now() - this.strokeTimestamp,\n      });\n    }\n    this.dispatchEvent('strokestart', { x, y });\n  }\n\n  /**\n   * Ends a stroke at a given position\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  endStroke(x, y) {\n    this.context.closePath();\n\n    if (this.recordStrokes) {\n      this.strokeMemory.push({\n        point: new Point(x, y),\n        time: performance.now() - this.strokeTimestamp,\n      });\n    }\n    this.dispatchEvent('strokeend', { x, y });\n\n    if (this.recordStrokes) {\n      this.dispatchEvent('strokerecorded', { stroke: this.currentStroke });\n    }\n    this.strokeMemory = [];\n    delete (this.strokeTimestamp);\n  }\n\n  /**\n   * Draws a smooth quadratic curve with adaptive stroke thickness\n   * between two points\n   *\n   * @param {number} x current X coordinate\n   * @param {number} y current Y coordinate\n   * @param {number} prevX previous X coordinate\n   * @param {number} prevY previous Y coordinate\n   */\n  draw(x, y, prevX, prevY) {\n    const { context } = this;\n    // calculate distance from previous point\n    const rawDist = Pixels.lineDistance(x, y, prevX, prevY);\n\n    // now, here we scale the initial smoothing factor by the raw distance\n    // this means that when the mouse moves fast, there is more smoothing\n    // and when we're drawing small detailed stuff, we have more control\n    // also we hard clip at 1\n    const smoothingFactor = Math.min(\n      Constants.minSmoothingFactor,\n      this.smoothing + (rawDist - 60) / 3000,\n    );\n\n    // calculate processed coordinates\n    const procX = x - (x - prevX) * smoothingFactor;\n    const procY = y - (y - prevY) * smoothingFactor;\n\n    // recalculate distance from previous point, this time relative to the smoothed coords\n    const dist = Pixels.lineDistance(procX, procY, prevX, prevY);\n\n    if (this.adaptiveStroke) {\n      // calculate target thickness based on the new distance\n      this.targetThickness = ((dist - Constants.minLineThickness) / Constants.lineThicknessRange)\n        * (this.maxWeight - this.weightInternal) + this.weightInternal;\n      // approach the target gradually\n      if (this.thickness > this.targetThickness) {\n        this.thickness -= Constants.thicknessIncrement;\n      } else if (this.thickness < this.targetThickness) {\n        this.thickness += Constants.thicknessIncrement;\n      }\n      // set line width\n      context.lineWidth = this.thickness;\n    } else {\n      // line width is equal to default weight\n      context.lineWidth = this.weightInternal;\n    }\n\n    // draw using quad interpolation\n    context.quadraticCurveTo(prevX, prevY, procX, procY);\n    context.stroke();\n\n    if (this.recordStrokes) {\n      this.strokeMemory.push({\n        point: new Point(x, y),\n        time: performance.now() - this.strokeTimestamp,\n      });\n      this.dispatchEvent('pointdrawn', { stroke: this.currentStroke });\n    }\n\n    return { x: procX, y: procY };\n  }\n\n  get color() {\n    return this.context.strokeStyle;\n  }\n\n  set color(c) {\n    if (typeof c !== 'string') throw new Error('wrong argument type');\n    this.context.strokeStyle = c;\n  }\n\n  get weight() {\n    return this.weightInternal;\n  }\n\n  set weight(w) {\n    if (typeof w !== 'number') throw new Error('wrong argument type');\n    this.weightInternal = w;\n    this.thickness = w;\n    this.targetThickness = w;\n    this.maxWeight = w + Constants.weightSpread;\n  }\n\n  get mode() {\n    return this.modeInternal;\n  }\n\n  set mode(m) {\n    if (typeof m !== 'string') throw new Error('wrong argument type');\n    switch (m) {\n      case DrawingMode.ERASE:\n        this.modeInternal = DrawingMode.ERASE;\n        this.context.globalCompositeOperation = 'destination-out';\n        break;\n      case DrawingMode.FILL:\n        this.modeInternal = DrawingMode.FILL;\n        this.context.globalCompositeOperation = 'source-over';\n        break;\n      case DrawingMode.DISABLED:\n        this.modeInternal = DrawingMode.DISABLED;\n        break;\n      default:\n        this.modeInternal = DrawingMode.DRAW;\n        this.context.globalCompositeOperation = 'source-over';\n        break;\n    }\n  }\n\n  get currentStroke() {\n    return {\n      points: this.strokeMemory.slice(),\n      mode: this.mode,\n      weight: this.weight,\n      smoothing: this.smoothing,\n      color: this.color,\n      adaptiveStroke: this.adaptiveStroke,\n    };\n  }\n\n  isDirty() {\n    return !!this.dirty;\n  }\n\n  fireDirty() {\n    this.dispatchEvent('dirty');\n  }\n\n  clear() {\n    if (!this.isDirty) {\n      return;\n    }\n\n    this.dirty = false;\n    this.dispatchEvent('clean');\n\n    // make sure we're in the right compositing mode, and erase everything\n    if (this.mode === DrawingMode.ERASE) {\n      this.mode = DrawingMode.DRAW;\n      this.context.clearRect(-10, -10, this.canvas.width + 20, this.canvas.height + 20);\n      this.mode = DrawingMode.ERASE;\n    } else {\n      this.context.clearRect(-10, -10, this.canvas.width + 20, this.canvas.height + 20);\n    }\n  }\n\n  toImage() {\n    return this.canvas.toDataURL();\n  }\n\n  fill() {\n    const { mouse } = this;\n    const { context } = this;\n    // converting to Array because Safari 9\n    const startColor = Array.from(context.getImageData(mouse.x, mouse.y, 1, 1).data);\n\n    if (!this.filling) {\n      const { x, y } = mouse;\n      this.dispatchEvent('fillstart', { x, y });\n      this.filling = true;\n      setTimeout(() => {\n        this.floodFill(mouse.x, mouse.y, startColor);\n      }, Constants.floodFillInterval);\n    } else {\n      this.fillStack.push([\n        mouse.x,\n        mouse.y,\n        startColor,\n      ]);\n    }\n  }\n\n  floodFill(_startX, _startY, startColor) {\n    const { context } = this;\n    const startX = Math.floor(_startX);\n    const startY = Math.floor(_startY);\n    const canvasWidth = context.canvas.width;\n    const canvasHeight = context.canvas.height;\n    const pixelStack = [[startX, startY]];\n    // hex needs to be trasformed to rgb since colorLayer accepts RGB\n    const fillColor = Pixels.hexToRgb(this.color);\n    // Need to save current context with colors, we will update it\n    const colorLayer = context.getImageData(0, 0, context.canvas.width, context.canvas.height);\n    const alpha = Math.min(context.globalAlpha * 10 * 255, 255);\n    const colorPixel = Pixels.colorPixel(colorLayer.data, ...fillColor, startColor, alpha);\n    const matchColor = Pixels.matchColor(colorLayer.data, ...startColor);\n    const matchFillColor = Pixels.matchColor(colorLayer.data, ...[...fillColor, 255]);\n\n    // check if we're trying to fill with the same colour, if so, stop\n    if (matchFillColor((startY * context.canvas.width + startX) * 4)) {\n      this.filling = false;\n      this.dispatchEvent('fillend', {});\n      return;\n    }\n\n    while (pixelStack.length) {\n      const newPos = pixelStack.pop();\n      const x = newPos[0];\n      let y = newPos[1];\n\n      let pixelPos = (y * canvasWidth + x) * 4;\n\n      while (y-- >= 0 && matchColor(pixelPos)) {\n        pixelPos -= canvasWidth * 4;\n      }\n      pixelPos += canvasWidth * 4;\n\n      ++y;\n\n      let reachLeft = false;\n      let reachRight = false;\n\n      while (y++ < canvasHeight - 1 && matchColor(pixelPos)) {\n        colorPixel(pixelPos);\n\n        if (x > 0) {\n          if (matchColor(pixelPos - 4)) {\n            if (!reachLeft) {\n              pixelStack.push([x - 1, y]);\n              reachLeft = true;\n            }\n          } else if (reachLeft) {\n            reachLeft = false;\n          }\n        }\n\n        if (x < canvasWidth - 1) {\n          if (matchColor(pixelPos + 4)) {\n            if (!reachRight) {\n              pixelStack.push([x + 1, y]);\n              reachRight = true;\n            }\n          } else if (reachRight) {\n            reachRight = false;\n          }\n        }\n\n        pixelPos += canvasWidth * 4;\n      }\n    }\n\n    // Update context with filled bucket!\n    context.putImageData(colorLayer, 0, 0);\n\n    if (this.fillStack.length) {\n      this.floodFill(...this.fillStack.shift());\n    } else {\n      this.filling = false;\n      this.dispatchEvent('fillend', {});\n    }\n  }\n}\n","import Atrament from './src/atrament.js';\n\nexport default Atrament;\n","export const floodFillInterval = 100;\nexport const maxLineThickness = 50;\nexport const minLineThickness = 1;\nexport const lineThicknessRange = maxLineThickness - minLineThickness;\nexport const thicknessIncrement = 0.5;\nexport const minSmoothingFactor = 0.87;\nexport const initialSmoothingFactor = 0.85;\nexport const weightSpread = 10;\nexport const initialThickness = 2;\n","export default class AtramentEventTarget {\n  constructor() {\n    this.eventListeners = new Map();\n  }\n\n  addEventListener(eventName, handler) {\n    const handlers = this.eventListeners.get(eventName) || new Set();\n    handlers.add(handler);\n    this.eventListeners.set(eventName, handlers);\n  }\n\n  removeEventListener(eventName, handler) {\n    const handlers = this.eventListeners.get(eventName);\n    if (!handlers) return;\n    handlers.delete(handler);\n  }\n\n  dispatchEvent(eventName, data) {\n    const handlers = this.eventListeners.get(eventName);\n    if (!handlers) return;\n    [...handlers].forEach((handler) => handler(data));\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Point","x","y","this","Mouse","down","previous","lineDistance","x1","y1","x2","y2","xs","ys","Math","sqrt","hexToRgb","hexColor","m","match","parseInt","matchColor","data","compR","compG","compB","compA","pixelPos","r","g","b","a","colorPixel","fillR","fillG","fillB","startColor","alpha","matcher","DrawingMode","PathDrawingModes","selector","config","window","Error","Node","tagName","canvas","document","querySelector","width","height","mouse","mouseMove","event","cancelable","preventDefault","rect","getBoundingClientRect","position","changedTouches","offsetX","offsetY","clientX","left","clientY","top","includes","mode","draw","newX","newY","dirty","fireDirty","set","mouseDown","beginStroke","fill","mouseUp","e","nx","ny","endStroke","addEventListener","destroy","clear","removeEventListener","context","getContext","globalCompositeOperation","globalAlpha","strokeStyle","color","lineCap","lineJoin","translate","filling","fillStack","recordStrokes","strokeMemory","smoothing","thickness","targetThickness","weightInternal","maxWeight","modeInternal","adaptiveStroke","forEach","undefined","beginPath","moveTo","strokeTimestamp","performance","now","push","point","time","dispatchEvent","closePath","stroke","currentStroke","prevX","prevY","rawDist","Pixels","smoothingFactor","min","procX","procY","dist","maxLineThickness","lineWidth","quadraticCurveTo","c","w","points","slice","weight","isDirty","clearRect","toDataURL","Array","from","getImageData","setTimeout","floodFill","_startX","_startY","startX","floor","startY","canvasWidth","canvasHeight","pixelStack","fillColor","colorLayer","matchFillColor","length","newPos","pop","reachLeft","reachRight","putImageData","shift","eventListeners","Map","eventName","handler","handlers","Set","add"],"sourceRoot":""}